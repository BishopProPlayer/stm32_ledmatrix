
LedP10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080035f8  080035f8  000135f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003610  08003610  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000004c0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004d4  200004d4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0c3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f14  00000000  00000000  0002d107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b80  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243a2  00000000  00000000  00030818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dee0  00000000  00000000  00054bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da96f  00000000  00000000  00062a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033b0  00000000  00000000  0013d45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080035e0 	.word	0x080035e0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080035e0 	.word	0x080035e0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <disp1color_FillScreenbuff>:

//==============================================================================
// Процедура заполняет буфер кадра значением FillValue
//==============================================================================
void disp1color_FillScreenbuff(uint8_t FillValue)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  memset(disp1color_buff, FillValue, sizeof(disp1color_buff));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2240      	movs	r2, #64	; 0x40
 80004fe:	4619      	mov	r1, r3
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disp1color_FillScreenbuff+0x20>)
 8000502:	f003 f865 	bl	80035d0 <memset>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000b0 	.word	0x200000b0

08000514 <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <disp1color_UpdateFromBuff+0x10>)
 800051c:	f000 f8e5 	bl	80006ea <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000b0 	.word	0x200000b0

08000528 <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
 8000532:	460b      	mov	r3, r1
 8000534:	80bb      	strh	r3, [r7, #4]
 8000536:	4613      	mov	r3, r2
 8000538:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 800053a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800053e:	2b1f      	cmp	r3, #31
 8000540:	dc48      	bgt.n	80005d4 <disp1color_DrawPixel+0xac>
 8000542:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000546:	2b0f      	cmp	r3, #15
 8000548:	dc44      	bgt.n	80005d4 <disp1color_DrawPixel+0xac>
 800054a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db40      	blt.n	80005d4 <disp1color_DrawPixel+0xac>
 8000552:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	db3c      	blt.n	80005d4 <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 800055a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800055e:	10db      	asrs	r3, r3, #3
 8000560:	b21b      	sxth	r3, r3
 8000562:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 8000564:	88bb      	ldrh	r3, [r7, #4]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 8000574:	89fb      	ldrh	r3, [r7, #14]
 8000576:	015b      	lsls	r3, r3, #5
 8000578:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 800057a:	88fa      	ldrh	r2, [r7, #6]
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	4413      	add	r3, r2
 8000580:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00f      	beq.n	80005a8 <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <disp1color_DrawPixel+0xb8>)
 800058c:	5cd3      	ldrb	r3, [r2, r3]
 800058e:	b25a      	sxtb	r2, r3
 8000590:	7b7b      	ldrb	r3, [r7, #13]
 8000592:	2101      	movs	r1, #1
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	b25b      	sxtb	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b25a      	sxtb	r2, r3
 800059e:	89fb      	ldrh	r3, [r7, #14]
 80005a0:	b2d1      	uxtb	r1, r2
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <disp1color_DrawPixel+0xb8>)
 80005a4:	54d1      	strb	r1, [r2, r3]
 80005a6:	e010      	b.n	80005ca <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 80005a8:	89fb      	ldrh	r3, [r7, #14]
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <disp1color_DrawPixel+0xb8>)
 80005ac:	5cd3      	ldrb	r3, [r2, r3]
 80005ae:	b25a      	sxtb	r2, r3
 80005b0:	7b7b      	ldrb	r3, [r7, #13]
 80005b2:	2101      	movs	r1, #1
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	4013      	ands	r3, r2
 80005c0:	b25a      	sxtb	r2, r3
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	b2d1      	uxtb	r1, r2
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <disp1color_DrawPixel+0xb8>)
 80005c8:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <disp1color_DrawPixel+0xb8>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	733b      	strb	r3, [r7, #12]
 80005d2:	e000      	b.n	80005d6 <disp1color_DrawPixel+0xae>
    return;
 80005d4:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200000b0 	.word	0x200000b0

080005e4 <disp1color_DrawLine>:

//==============================================================================
// Процедура рисует прямую линию в буфере кадра дисплея
//==============================================================================
void disp1color_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2) 
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4604      	mov	r4, r0
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4623      	mov	r3, r4
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4603      	mov	r3, r0
 80005f8:	80bb      	strh	r3, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	807b      	strh	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	803b      	strh	r3, [r7, #0]
  const int16_t deltaX = abs(x2 - x1);
 8000602:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	bfb8      	it	lt
 8000610:	425b      	neglt	r3, r3
 8000612:	82bb      	strh	r3, [r7, #20]
  const int16_t deltaY = abs(y2 - y1);
 8000614:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000618:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	bfb8      	it	lt
 8000622:	425b      	neglt	r3, r3
 8000624:	827b      	strh	r3, [r7, #18]
  const int16_t signX = x1 < x2 ? 1 : -1;
 8000626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800062a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800062e:	429a      	cmp	r2, r3
 8000630:	da01      	bge.n	8000636 <disp1color_DrawLine+0x52>
 8000632:	2301      	movs	r3, #1
 8000634:	e001      	b.n	800063a <disp1color_DrawLine+0x56>
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	823b      	strh	r3, [r7, #16]
  const int16_t signY = y1 < y2 ? 1 : -1;
 800063c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000640:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000644:	429a      	cmp	r2, r3
 8000646:	da01      	bge.n	800064c <disp1color_DrawLine+0x68>
 8000648:	2301      	movs	r3, #1
 800064a:	e001      	b.n	8000650 <disp1color_DrawLine+0x6c>
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	81fb      	strh	r3, [r7, #14]

  int16_t error = deltaX - deltaY;
 8000652:	8aba      	ldrh	r2, [r7, #20]
 8000654:	8a7b      	ldrh	r3, [r7, #18]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	82fb      	strh	r3, [r7, #22]

  disp1color_DrawPixel(x2, y2, 1);
 800065c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000664:	2201      	movs	r2, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff5e 	bl	8000528 <disp1color_DrawPixel>

  while (x1 != x2 || y1 != y2) 
 800066c:	e02c      	b.n	80006c8 <disp1color_DrawLine+0xe4>
  {
    disp1color_DrawPixel(x1, y1, 1);
 800066e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000676:	2201      	movs	r2, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff55 	bl	8000528 <disp1color_DrawPixel>
    const int16_t error2 = error * 2;
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	b29b      	uxth	r3, r3
 8000684:	81bb      	strh	r3, [r7, #12]
 
    if (error2 > -deltaY) 
 8000686:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800068a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800068e:	425b      	negs	r3, r3
 8000690:	429a      	cmp	r2, r3
 8000692:	dd09      	ble.n	80006a8 <disp1color_DrawLine+0xc4>
    {
      error -= deltaY;
 8000694:	8afa      	ldrh	r2, [r7, #22]
 8000696:	8a7b      	ldrh	r3, [r7, #18]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	82fb      	strh	r3, [r7, #22]
      x1 += signX;
 800069e:	88fa      	ldrh	r2, [r7, #6]
 80006a0:	8a3b      	ldrh	r3, [r7, #16]
 80006a2:	4413      	add	r3, r2
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	80fb      	strh	r3, [r7, #6]
    }
    if (error2 < deltaX)
 80006a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80006ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	da09      	bge.n	80006c8 <disp1color_DrawLine+0xe4>
    {
      error += deltaX;
 80006b4:	8afa      	ldrh	r2, [r7, #22]
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	4413      	add	r3, r2
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	82fb      	strh	r3, [r7, #22]
      y1 += signY;
 80006be:	88ba      	ldrh	r2, [r7, #4]
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	4413      	add	r3, r2
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	80bb      	strh	r3, [r7, #4]
  while (x1 != x2 || y1 != y2) 
 80006c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d1cc      	bne.n	800066e <disp1color_DrawLine+0x8a>
 80006d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d1c6      	bne.n	800066e <disp1color_DrawLine+0x8a>
    }
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}

080006ea <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	461a      	mov	r2, r3
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 f817 	bl	8000730 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	461a      	mov	r2, r3
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f811 	bl	8000730 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 800070e:	887b      	ldrh	r3, [r7, #2]
 8000710:	461a      	mov	r2, r3
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2002      	movs	r0, #2
 8000716:	f000 f80b 	bl	8000730 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	461a      	mov	r2, r3
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2003      	movs	r0, #3
 8000722:	f000 f805 	bl	8000730 <DMD_1COLOR_UpdateRow4>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000740:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <DMD_1COLOR_UpdateRow4+0xcc>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	095b      	lsrs	r3, r3, #5
 8000746:	b2db      	uxtb	r3, r3
 8000748:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <DMD_1COLOR_UpdateRow4+0xd0>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000754:	2302      	movs	r3, #2
 8000756:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	83fb      	strh	r3, [r7, #30]
 800075c:	2300      	movs	r3, #0
 800075e:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000760:	2300      	movs	r3, #0
 8000762:	76fb      	strb	r3, [r7, #27]
 8000764:	e040      	b.n	80007e8 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 8000766:	8bfb      	ldrh	r3, [r7, #30]
 8000768:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 800076a:	2300      	movs	r3, #0
 800076c:	76bb      	strb	r3, [r7, #26]
 800076e:	e028      	b.n	80007c2 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <DMD_1COLOR_UpdateRow4+0xd4>)
 8000772:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 8000774:	8bbb      	ldrh	r3, [r7, #28]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e015      	b.n	80007ae <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 8000782:	2220      	movs	r2, #32
 8000784:	6939      	ldr	r1, [r7, #16]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f002 ff14 	bl	80035b4 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	491d      	ldr	r1, [pc, #116]	; (8000804 <DMD_1COLOR_UpdateRow4+0xd4>)
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f839 	bl	8000808 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3320      	adds	r3, #32
 800079a:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <DMD_1COLOR_UpdateRow4+0xcc>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	4413      	add	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	7a7b      	ldrb	r3, [r7, #9]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e5      	bcc.n	8000782 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80007b6:	8bbb      	ldrh	r3, [r7, #28]
 80007b8:	3320      	adds	r3, #32
 80007ba:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80007bc:	7ebb      	ldrb	r3, [r7, #26]
 80007be:	3301      	adds	r3, #1
 80007c0:	76bb      	strb	r3, [r7, #26]
 80007c2:	7ebb      	ldrb	r3, [r7, #26]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	897a      	ldrh	r2, [r7, #10]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d8d1      	bhi.n	8000770 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 80007cc:	7a7b      	ldrb	r3, [r7, #9]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <DMD_1COLOR_UpdateRow4+0xcc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	fb12 f303 	smulbb	r3, r2, r3
 80007da:	b29a      	uxth	r2, r3
 80007dc:	8bfb      	ldrh	r3, [r7, #30]
 80007de:	4413      	add	r3, r2
 80007e0:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 80007e2:	7efb      	ldrb	r3, [r7, #27]
 80007e4:	3301      	adds	r3, #1
 80007e6:	76fb      	strb	r3, [r7, #27]
 80007e8:	7efb      	ldrb	r3, [r7, #27]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	89ba      	ldrh	r2, [r7, #12]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d8b9      	bhi.n	8000766 <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000001 	.word	0x20000001
 8000800:	20000000 	.word	0x20000000
 8000804:	20000030 	.word	0x20000030

08000808 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000814:	2302      	movs	r3, #2
 8000816:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000818:	2304      	movs	r3, #4
 800081a:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000822:	4413      	add	r3, r2
 8000824:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000826:	2300      	movs	r3, #0
 8000828:	74fb      	strb	r3, [r7, #19]
 800082a:	e035      	b.n	8000898 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 800082c:	7c7b      	ldrb	r3, [r7, #17]
 800082e:	74bb      	strb	r3, [r7, #18]
 8000830:	e02c      	b.n	800088c <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000832:	7cbb      	ldrb	r3, [r7, #18]
 8000834:	3b01      	subs	r3, #1
 8000836:	015b      	lsls	r3, r3, #5
 8000838:	461a      	mov	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	4413      	add	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	461a      	mov	r2, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3304      	adds	r3, #4
 8000850:	2201      	movs	r2, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	697c      	ldr	r4, [r7, #20]
 800085a:	1c63      	adds	r3, r4, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	4610      	mov	r0, r2
 8000862:	f000 f825 	bl	80008b0 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000866:	4603      	mov	r3, r0
 8000868:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2201      	movs	r2, #1
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	b2da      	uxtb	r2, r3
 8000874:	697c      	ldr	r4, [r7, #20]
 8000876:	1c63      	adds	r3, r4, #1
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	68f9      	ldr	r1, [r7, #12]
 800087c:	4610      	mov	r0, r2
 800087e:	f000 f817 	bl	80008b0 <DMD_1COLOR_GetFrom8ScreenBytes>
 8000882:	4603      	mov	r3, r0
 8000884:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 8000886:	7cbb      	ldrb	r3, [r7, #18]
 8000888:	3b01      	subs	r3, #1
 800088a:	74bb      	strb	r3, [r7, #18]
 800088c:	7cbb      	ldrb	r3, [r7, #18]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1cf      	bne.n	8000832 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000892:	7cfb      	ldrb	r3, [r7, #19]
 8000894:	3301      	adds	r3, #1
 8000896:	74fb      	strb	r3, [r7, #19]
 8000898:	7cfa      	ldrb	r2, [r7, #19]
 800089a:	7c3b      	ldrb	r3, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d3c5      	bcc.n	800082c <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	371c      	adds	r7, #28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000070 	.word	0x20000070

080008b0 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	73bb      	strb	r3, [r7, #14]
 80008c4:	e010      	b.n	80008e8 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4013      	ands	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	4313      	orrs	r3, r2
 80008da:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	73bb      	strb	r3, [r7, #14]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1eb      	bne.n	80008c6 <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	e042      	b.n	8000996 <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000910:	2300      	movs	r3, #0
 8000912:	71bb      	strb	r3, [r7, #6]
 8000914:	e039      	b.n	800098a <prepare_data+0x86>
			if (i == 0) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10a      	bne.n	8000932 <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 800091c:	79f9      	ldrb	r1, [r7, #7]
 800091e:	79ba      	ldrb	r2, [r7, #6]
 8000920:	79bb      	ldrb	r3, [r7, #6]
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <prepare_data+0xa8>)
 8000924:	0109      	lsls	r1, r1, #4
 8000926:	4401      	add	r1, r0
 8000928:	440a      	add	r2, r1
 800092a:	7811      	ldrb	r1, [r2, #0]
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <prepare_data+0xac>)
 800092e:	54d1      	strb	r1, [r2, r3]
 8000930:	e028      	b.n	8000984 <prepare_data+0x80>
			}
			else if (i == 1) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10a      	bne.n	800094e <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000938:	79f9      	ldrb	r1, [r7, #7]
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	481b      	ldr	r0, [pc, #108]	; (80009ac <prepare_data+0xa8>)
 8000940:	0109      	lsls	r1, r1, #4
 8000942:	4401      	add	r1, r0
 8000944:	440a      	add	r2, r1
 8000946:	7811      	ldrb	r1, [r2, #0]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <prepare_data+0xb0>)
 800094a:	54d1      	strb	r1, [r2, r3]
 800094c:	e01a      	b.n	8000984 <prepare_data+0x80>
			}
			else if (i == 2) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d10a      	bne.n	800096a <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000954:	79f9      	ldrb	r1, [r7, #7]
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	79bb      	ldrb	r3, [r7, #6]
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <prepare_data+0xa8>)
 800095c:	0109      	lsls	r1, r1, #4
 800095e:	4401      	add	r1, r0
 8000960:	440a      	add	r2, r1
 8000962:	7811      	ldrb	r1, [r2, #0]
 8000964:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <prepare_data+0xb4>)
 8000966:	54d1      	strb	r1, [r2, r3]
 8000968:	e00c      	b.n	8000984 <prepare_data+0x80>
			}
			else if (i == 3) {
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d109      	bne.n	8000984 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 8000970:	79f9      	ldrb	r1, [r7, #7]
 8000972:	79ba      	ldrb	r2, [r7, #6]
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <prepare_data+0xa8>)
 8000978:	0109      	lsls	r1, r1, #4
 800097a:	4401      	add	r1, r0
 800097c:	440a      	add	r2, r1
 800097e:	7811      	ldrb	r1, [r2, #0]
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <prepare_data+0xb8>)
 8000982:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	3301      	adds	r3, #1
 8000988:	71bb      	strb	r3, [r7, #6]
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d9c2      	bls.n	8000916 <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	3301      	adds	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d9b9      	bls.n	8000910 <prepare_data+0xc>
			}
		}
	}
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000070 	.word	0x20000070
 80009b0:	200000f0 	.word	0x200000f0
 80009b4:	20000100 	.word	0x20000100
 80009b8:	20000110 	.word	0x20000110
 80009bc:	20000120 	.word	0x20000120

080009c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <MX_GPIO_Init+0x124>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x124>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <MX_GPIO_Init+0x124>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_GPIO_Init+0x124>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a3a      	ldr	r2, [pc, #232]	; (8000ae4 <MX_GPIO_Init+0x124>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a33      	ldr	r2, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a2c      	ldr	r2, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <MX_GPIO_Init+0x124>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, B_Pin|A_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2109      	movs	r1, #9
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <MX_GPIO_Init+0x128>)
 8000a4c:	f001 fa10 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2150      	movs	r1, #80	; 0x50
 8000a54:	4825      	ldr	r0, [pc, #148]	; (8000aec <MX_GPIO_Init+0x12c>)
 8000a56:	f001 fa0b 	bl	8001e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B_Pin|A_Pin;
 8000a5a:	2309      	movs	r3, #9
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0x128>)
 8000a72:	f001 f851 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000a76:	2350      	movs	r3, #80	; 0x50
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <MX_GPIO_Init+0x12c>)
 8000a8e:	f001 f843 	bl	8001b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = right_button_Pin|button_beam_Pin|left_button_Pin;
 8000a92:	2338      	movs	r3, #56	; 0x38
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_GPIO_Init+0x130>)
 8000aa8:	f001 f836 	bl	8001b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2009      	movs	r0, #9
 8000ab2:	f000 fffa 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	f001 f813 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fff2 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ac6:	200a      	movs	r0, #10
 8000ac8:	f001 f80b 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2017      	movs	r0, #23
 8000ad2:	f000 ffea 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad6:	2017      	movs	r0, #23
 8000ad8:	f001 f803 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400

08000af4 <generate_ledmatrix>:
//beam[0][0] = 1;
//beam[0][1] = 1;

//set ping led_matrix
void generate_ledmatrix()
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	e013      	b.n	8000b28 <generate_ledmatrix+0x34>
	{
		for( int j = 0; j < 32; j++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	e00a      	b.n	8000b1c <generate_ledmatrix+0x28>
		{
			led_matrix[i][j] = 0;
 8000b06:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <generate_ledmatrix+0x48>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	015b      	lsls	r3, r3, #5
 8000b0c:	441a      	add	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		for( int j = 0; j < 32; j++)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b1f      	cmp	r3, #31
 8000b20:	ddf1      	ble.n	8000b06 <generate_ledmatrix+0x12>
	for(int i = 0; i < 16; i++)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3301      	adds	r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	dde8      	ble.n	8000b00 <generate_ledmatrix+0xc>
		}
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000130 	.word	0x20000130

08000b40 <draw_aircraft>:
//plush aircraft_mmatrix with led_matrix
void draw_aircraft(uint16_t x_a, uint16_t y_a){
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	80bb      	strh	r3, [r7, #4]
	for (int i = 0; i < 5; i++){
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e020      	b.n	8000b98 <draw_aircraft+0x58>
		for (int j = 0; j < 4; j++){
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	e017      	b.n	8000b8c <draw_aircraft+0x4c>
//			led_matrix[y_a+i][x_a+j] |= aircrafts[i][j];
			if (aircrafts[i][j] == 1){
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <draw_aircraft+0x6c>)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	441a      	add	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d10b      	bne.n	8000b86 <draw_aircraft+0x46>
				led_matrix[y_a+i][x_a+j] = 1;
 8000b6e:	88ba      	ldrh	r2, [r7, #4]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	441a      	add	r2, r3
 8000b74:	88f9      	ldrh	r1, [r7, #6]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	440b      	add	r3, r1
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <draw_aircraft+0x70>)
 8000b7c:	0152      	lsls	r2, r2, #5
 8000b7e:	440a      	add	r2, r1
 8000b80:	4413      	add	r3, r2
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++){
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	dde4      	ble.n	8000b5c <draw_aircraft+0x1c>
	for (int i = 0; i < 5; i++){
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	dddb      	ble.n	8000b56 <draw_aircraft+0x16>
			}
		}
	}

}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	200003c4 	.word	0x200003c4
 8000bb0:	20000130 	.word	0x20000130

08000bb4 <draw_enemy_aircraft>:
//plush enemy_aircraft_mmatrix with led_matrix
void draw_enemy_aircraft(uint16_t x_ea, uint16_t y_ea){
 8000bb4:	b490      	push	{r4, r7}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
//				led_matrix[y_ea+i][x_ea+j] |= enemy_aircrafts[i][j];
//			}
//		}
//	}

		for (int i=0; i < 3; i++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e02d      	b.n	8000c26 <draw_enemy_aircraft+0x72>
			for (int j=0; j<3; j++){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	e024      	b.n	8000c1a <draw_enemy_aircraft+0x66>
				led_matrix[y_ea+i][x_ea+j] |= enemy_aircrafts[i][j];
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	441a      	add	r2, r3
 8000bd6:	88f9      	ldrh	r1, [r7, #6]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	440b      	add	r3, r1
 8000bdc:	4916      	ldr	r1, [pc, #88]	; (8000c38 <draw_enemy_aircraft+0x84>)
 8000bde:	0152      	lsls	r2, r2, #5
 8000be0:	440a      	add	r2, r1
 8000be2:	4413      	add	r3, r2
 8000be4:	7818      	ldrb	r0, [r3, #0]
 8000be6:	4915      	ldr	r1, [pc, #84]	; (8000c3c <draw_enemy_aircraft+0x88>)
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	18ca      	adds	r2, r1, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	7819      	ldrb	r1, [r3, #0]
 8000bf8:	88ba      	ldrh	r2, [r7, #4]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	441a      	add	r2, r3
 8000bfe:	88fc      	ldrh	r4, [r7, #6]
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4423      	add	r3, r4
 8000c04:	4301      	orrs	r1, r0
 8000c06:	b2c8      	uxtb	r0, r1
 8000c08:	490b      	ldr	r1, [pc, #44]	; (8000c38 <draw_enemy_aircraft+0x84>)
 8000c0a:	0152      	lsls	r2, r2, #5
 8000c0c:	440a      	add	r2, r1
 8000c0e:	4413      	add	r3, r2
 8000c10:	4602      	mov	r2, r0
 8000c12:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<3; j++){
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	ddd7      	ble.n	8000bd0 <draw_enemy_aircraft+0x1c>
		for (int i=0; i < 3; i++){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	ddce      	ble.n	8000bca <draw_enemy_aircraft+0x16>
			}
		}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc90      	pop	{r4, r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000130 	.word	0x20000130
 8000c3c:	200003d8 	.word	0x200003d8

08000c40 <draw_beam>:
//plush beam_mmatrix with led_matrix
void draw_beam(uint16_t x_b, uint16_t y_b){
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	80fb      	strh	r3, [r7, #6]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i < 1; i++){
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e01f      	b.n	8000c96 <draw_beam+0x56>
		for (int j = 0; j < 1; j++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	e016      	b.n	8000c8a <draw_beam+0x4a>
	  		if (beam[i][j] == 1){
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <draw_beam+0x6c>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	441a      	add	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10b      	bne.n	8000c84 <draw_beam+0x44>
	  			led_matrix[y_b+i][x_b+j] = 1;
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	441a      	add	r2, r3
 8000c72:	88f9      	ldrh	r1, [r7, #6]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	440b      	add	r3, r1
 8000c78:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <draw_beam+0x70>)
 8000c7a:	0152      	lsls	r2, r2, #5
 8000c7c:	440a      	add	r2, r1
 8000c7e:	4413      	add	r3, r2
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 1; j++){
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	dde5      	ble.n	8000c5c <draw_beam+0x1c>
	for(int i = 0; i < 1; i++){
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dddc      	ble.n	8000c56 <draw_beam+0x16>
//		led_matrix[y_b][temp] = 1;
//	}else{
//		led_matrix[y_b][temp] = 0;
//		x_b++;
//	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200003e4 	.word	0x200003e4
 8000cb0:	20000130 	.word	0x20000130

08000cb4 <disp_row>:
//update_led_panel
void disp_row(int row){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]


	  if (row == 0){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d122      	bne.n	8000d08 <disp_row+0x54>

		  for(uint8_t i=0; i<6; i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e008      	b.n	8000cda <disp_row+0x26>
		  		HAL_SPI_Transmit(&hspi1, &data1, 16, 10);
 8000cc8:	230a      	movs	r3, #10
 8000cca:	2210      	movs	r2, #16
 8000ccc:	4953      	ldr	r1, [pc, #332]	; (8000e1c <disp_row+0x168>)
 8000cce:	4854      	ldr	r0, [pc, #336]	; (8000e20 <disp_row+0x16c>)
 8000cd0:	f001 fdb9 	bl	8002846 <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d9f3      	bls.n	8000cc8 <disp_row+0x14>
		  }

		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	484f      	ldr	r0, [pc, #316]	; (8000e24 <disp_row+0x170>)
 8000ce6:	f001 f8c3 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	484d      	ldr	r0, [pc, #308]	; (8000e24 <disp_row+0x170>)
 8000cf0:	f001 f8be 	bl	8001e70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	484b      	ldr	r0, [pc, #300]	; (8000e28 <disp_row+0x174>)
 8000cfa:	f001 f8b9 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	4849      	ldr	r0, [pc, #292]	; (8000e28 <disp_row+0x174>)
 8000d04:	f001 f8b4 	bl	8001e70 <HAL_GPIO_WritePin>
	  }
	  if (row == 1){
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d122      	bne.n	8000d54 <disp_row+0xa0>

		  for(uint8_t i=0; i<6; i++){
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73bb      	strb	r3, [r7, #14]
 8000d12:	e008      	b.n	8000d26 <disp_row+0x72>
		  		HAL_SPI_Transmit(&hspi1, &data2, 16, 10);
 8000d14:	230a      	movs	r3, #10
 8000d16:	2210      	movs	r2, #16
 8000d18:	4944      	ldr	r1, [pc, #272]	; (8000e2c <disp_row+0x178>)
 8000d1a:	4841      	ldr	r0, [pc, #260]	; (8000e20 <disp_row+0x16c>)
 8000d1c:	f001 fd93 	bl	8002846 <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73bb      	strb	r3, [r7, #14]
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d9f3      	bls.n	8000d14 <disp_row+0x60>
		  }

		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	483c      	ldr	r0, [pc, #240]	; (8000e24 <disp_row+0x170>)
 8000d32:	f001 f89d 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	483a      	ldr	r0, [pc, #232]	; (8000e24 <disp_row+0x170>)
 8000d3c:	f001 f898 	bl	8001e70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2108      	movs	r1, #8
 8000d44:	4838      	ldr	r0, [pc, #224]	; (8000e28 <disp_row+0x174>)
 8000d46:	f001 f893 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4836      	ldr	r0, [pc, #216]	; (8000e28 <disp_row+0x174>)
 8000d50:	f001 f88e 	bl	8001e70 <HAL_GPIO_WritePin>
	  }

	  if (row == 2){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d122      	bne.n	8000da0 <disp_row+0xec>

		  for(uint8_t i=0; i<6; i++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	737b      	strb	r3, [r7, #13]
 8000d5e:	e008      	b.n	8000d72 <disp_row+0xbe>
		  		HAL_SPI_Transmit(&hspi1, &data3, 16, 10);
 8000d60:	230a      	movs	r3, #10
 8000d62:	2210      	movs	r2, #16
 8000d64:	4932      	ldr	r1, [pc, #200]	; (8000e30 <disp_row+0x17c>)
 8000d66:	482e      	ldr	r0, [pc, #184]	; (8000e20 <disp_row+0x16c>)
 8000d68:	f001 fd6d 	bl	8002846 <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8000d6c:	7b7b      	ldrb	r3, [r7, #13]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	737b      	strb	r3, [r7, #13]
 8000d72:	7b7b      	ldrb	r3, [r7, #13]
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d9f3      	bls.n	8000d60 <disp_row+0xac>
		  }

		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <disp_row+0x170>)
 8000d7e:	f001 f877 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4827      	ldr	r0, [pc, #156]	; (8000e24 <disp_row+0x170>)
 8000d88:	f001 f872 	bl	8001e70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4825      	ldr	r0, [pc, #148]	; (8000e28 <disp_row+0x174>)
 8000d92:	f001 f86d 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4823      	ldr	r0, [pc, #140]	; (8000e28 <disp_row+0x174>)
 8000d9c:	f001 f868 	bl	8001e70 <HAL_GPIO_WritePin>
	  }

	  if (row == 3){
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d122      	bne.n	8000dec <disp_row+0x138>

		  for(uint8_t i=0; i<6; i++){
 8000da6:	2300      	movs	r3, #0
 8000da8:	733b      	strb	r3, [r7, #12]
 8000daa:	e008      	b.n	8000dbe <disp_row+0x10a>
		  		HAL_SPI_Transmit(&hspi1, &data4, 16, 10);
 8000dac:	230a      	movs	r3, #10
 8000dae:	2210      	movs	r2, #16
 8000db0:	4920      	ldr	r1, [pc, #128]	; (8000e34 <disp_row+0x180>)
 8000db2:	481b      	ldr	r0, [pc, #108]	; (8000e20 <disp_row+0x16c>)
 8000db4:	f001 fd47 	bl	8002846 <HAL_SPI_Transmit>
		  for(uint8_t i=0; i<6; i++){
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	733b      	strb	r3, [r7, #12]
 8000dbe:	7b3b      	ldrb	r3, [r7, #12]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d9f3      	bls.n	8000dac <disp_row+0xf8>
		  }

		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <disp_row+0x170>)
 8000dca:	f001 f851 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, SCLK_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <disp_row+0x170>)
 8000dd4:	f001 f84c 	bl	8001e70 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <disp_row+0x174>)
 8000dde:	f001 f847 	bl	8001e70 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2101      	movs	r1, #1
 8000de6:	4810      	ldr	r0, [pc, #64]	; (8000e28 <disp_row+0x174>)
 8000de8:	f001 f842 	bl	8001e70 <HAL_GPIO_WritePin>
	  }


	  HAL_GPIO_WritePin(GPIOA, nOE_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <disp_row+0x170>)
 8000df2:	f001 f83d 	bl	8001e70 <HAL_GPIO_WritePin>
		  for(uint32_t x=0; x<=500; x++) {};
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	e002      	b.n	8000e02 <disp_row+0x14e>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e08:	d9f8      	bls.n	8000dfc <disp_row+0x148>
	 HAL_GPIO_WritePin(GPIOA, nOE_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <disp_row+0x170>)
 8000e10:	f001 f82e 	bl	8001e70 <HAL_GPIO_WritePin>
  }
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200000f0 	.word	0x200000f0
 8000e20:	200003e8 	.word	0x200003e8
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	20000100 	.word	0x20000100
 8000e30:	20000110 	.word	0x20000110
 8000e34:	20000120 	.word	0x20000120

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fce7 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f9d5 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f7ff fdbb 	bl	80009c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e4a:	f000 fa41 	bl	80012d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e4e:	f000 fbd1 	bl	80015f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e52:	f000 fc21 	bl	8001698 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000e56:	48a3      	ldr	r0, [pc, #652]	; (80010e4 <main+0x2ac>)
 8000e58:	f001 ff4c 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	48a2      	ldr	r0, [pc, #648]	; (80010e8 <main+0x2b0>)
 8000e5e:	f001 ff49 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOA, nOE_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	48a1      	ldr	r0, [pc, #644]	; (80010ec <main+0x2b4>)
 8000e68:	f001 f802 	bl	8001e70 <HAL_GPIO_WritePin>
    *  1 1 1 0
    *  1 1 1 1
    *  1 1 1 0
    *  1 0 0 0
 */
  for (int i = 0; i < 5; i++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e70:	e013      	b.n	8000e9a <main+0x62>
 	  	for (int j = 0; j < 4; j++){
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e76:	e00a      	b.n	8000e8e <main+0x56>
 	  		aircrafts[i][j] = 0;
 8000e78:	4a9d      	ldr	r2, [pc, #628]	; (80010f0 <main+0x2b8>)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	441a      	add	r2, r3
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	4413      	add	r3, r2
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
 	  	for (int j = 0; j < 4; j++){
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	ddf1      	ble.n	8000e78 <main+0x40>
  for (int i = 0; i < 5; i++){
 8000e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e96:	3301      	adds	r3, #1
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	dde8      	ble.n	8000e72 <main+0x3a>
 	  	}
 	  }
  aircrafts[0][0] = 1;
 8000ea0:	4b93      	ldr	r3, [pc, #588]	; (80010f0 <main+0x2b8>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
  aircrafts[1][0] = 1;
 8000ea6:	4b92      	ldr	r3, [pc, #584]	; (80010f0 <main+0x2b8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	711a      	strb	r2, [r3, #4]
  aircrafts[1][1] = 1;
 8000eac:	4b90      	ldr	r3, [pc, #576]	; (80010f0 <main+0x2b8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	715a      	strb	r2, [r3, #5]
  aircrafts[1][2] = 1;
 8000eb2:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <main+0x2b8>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	719a      	strb	r2, [r3, #6]
  aircrafts[2][0] = 1;
 8000eb8:	4b8d      	ldr	r3, [pc, #564]	; (80010f0 <main+0x2b8>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	721a      	strb	r2, [r3, #8]
  aircrafts[2][1] = 1;
 8000ebe:	4b8c      	ldr	r3, [pc, #560]	; (80010f0 <main+0x2b8>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	725a      	strb	r2, [r3, #9]
  aircrafts[2][2] = 1;
 8000ec4:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <main+0x2b8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	729a      	strb	r2, [r3, #10]
  aircrafts[2][3] = 1;
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <main+0x2b8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	72da      	strb	r2, [r3, #11]
  aircrafts[3][0] = 1;
 8000ed0:	4b87      	ldr	r3, [pc, #540]	; (80010f0 <main+0x2b8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	731a      	strb	r2, [r3, #12]
  aircrafts[3][1] = 1;
 8000ed6:	4b86      	ldr	r3, [pc, #536]	; (80010f0 <main+0x2b8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	735a      	strb	r2, [r3, #13]
  aircrafts[3][2] = 1;
 8000edc:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <main+0x2b8>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	739a      	strb	r2, [r3, #14]
  aircrafts[4][0] = 1;
 8000ee2:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <main+0x2b8>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	741a      	strb	r2, [r3, #16]
  /* enemy_aircrafts =
   * 0 0 1
   * 0 1 1
   * 0 0 1
   */
  for (int i=0; i < 3; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	e015      	b.n	8000f1a <main+0xe2>
	  for (int j=0; j<3; j++){
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
 8000ef2:	e00c      	b.n	8000f0e <main+0xd6>
 		enemy_aircrafts[i][j] = 0;
 8000ef4:	497f      	ldr	r1, [pc, #508]	; (80010f4 <main+0x2bc>)
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	18ca      	adds	r2, r1, r3
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	  for (int j=0; j<3; j++){
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	ddef      	ble.n	8000ef4 <main+0xbc>
  for (int i=0; i < 3; i++){
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	3301      	adds	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	dde6      	ble.n	8000eee <main+0xb6>
	  }
  }
  enemy_aircrafts[0][2] = 1;
 8000f20:	4b74      	ldr	r3, [pc, #464]	; (80010f4 <main+0x2bc>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	709a      	strb	r2, [r3, #2]
  enemy_aircrafts[1][1] = 1;
 8000f26:	4b73      	ldr	r3, [pc, #460]	; (80010f4 <main+0x2bc>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	711a      	strb	r2, [r3, #4]
  enemy_aircrafts[1][2] = 1;
 8000f2c:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <main+0x2bc>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	715a      	strb	r2, [r3, #5]
  enemy_aircrafts[2][2] = 1;
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <main+0x2bc>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	721a      	strb	r2, [r3, #8]
  //draw matrix_beam
  beam[0][0] = 1;
 8000f38:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <main+0x2c0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
//  beam[0][1] = 1;

  x_beam = x_start + 5;
 8000f3e:	4b6f      	ldr	r3, [pc, #444]	; (80010fc <main+0x2c4>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	3305      	adds	r3, #5
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <main+0x2c8>)
 8000f4a:	801a      	strh	r2, [r3, #0]
  y_beam = y_start + 2;
 8000f4c:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <main+0x2cc>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	3302      	adds	r3, #2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b6c      	ldr	r3, [pc, #432]	; (8001108 <main+0x2d0>)
 8000f58:	801a      	strh	r2, [r3, #0]

  x_enemy = 15;
 8000f5a:	4b6c      	ldr	r3, [pc, #432]	; (800110c <main+0x2d4>)
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	801a      	strh	r2, [r3, #0]
  y_enemy = 7;
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <main+0x2d8>)
 8000f62:	2207      	movs	r2, #7
 8000f64:	801a      	strh	r2, [r3, #0]

  for (int i = 0; i<15; i++){
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e007      	b.n	8000f7c <main+0x144>
	  flag_draw[i] = 0;
 8000f6c:	4a69      	ldr	r2, [pc, #420]	; (8001114 <main+0x2dc>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	2100      	movs	r1, #0
 8000f72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i<15; i++){
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b0e      	cmp	r3, #14
 8000f80:	ddf4      	ble.n	8000f6c <main+0x134>
  }

  array_enemy[0][0] = 28;
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <main+0x2e0>)
 8000f84:	221c      	movs	r2, #28
 8000f86:	801a      	strh	r2, [r3, #0]
  array_enemy[0][1] =  1;
 8000f88:	4b63      	ldr	r3, [pc, #396]	; (8001118 <main+0x2e0>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	805a      	strh	r2, [r3, #2]
  array_enemy[1][0] = 28;
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <main+0x2e0>)
 8000f90:	221c      	movs	r2, #28
 8000f92:	809a      	strh	r2, [r3, #4]
  array_enemy[1][1] =  5;
 8000f94:	4b60      	ldr	r3, [pc, #384]	; (8001118 <main+0x2e0>)
 8000f96:	2205      	movs	r2, #5
 8000f98:	80da      	strh	r2, [r3, #6]
  array_enemy[2][0] = 28;
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <main+0x2e0>)
 8000f9c:	221c      	movs	r2, #28
 8000f9e:	811a      	strh	r2, [r3, #8]
  array_enemy[2][1] =  9;
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <main+0x2e0>)
 8000fa2:	2209      	movs	r2, #9
 8000fa4:	815a      	strh	r2, [r3, #10]


  while (1)
  {
	  //generate led matrix 32*16
	  generate_ledmatrix();
 8000fa6:	f7ff fda5 	bl	8000af4 <generate_ledmatrix>

	  //draw aircraft in led matrix
	  draw_aircraft(x_start,y_start);
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <main+0x2c4>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4a54      	ldr	r2, [pc, #336]	; (8001104 <main+0x2cc>)
 8000fb2:	8812      	ldrh	r2, [r2, #0]
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fdc1 	bl	8000b40 <draw_aircraft>

	  //update beam in led matrix

	  for (int i = 0; i < counter_bullet; i++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	e031      	b.n	8001028 <main+0x1f0>
		  if (x_bullets[i] != 0){
 8000fc4:	4a55      	ldr	r2, [pc, #340]	; (800111c <main+0x2e4>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d028      	beq.n	8001022 <main+0x1ea>
			  if ((x_bullets[i] <= 31) && (led_matrix[x_bullets[i]+2][2]!= 1)) {
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <main+0x2e4>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd8:	2b1f      	cmp	r3, #31
 8000fda:	d818      	bhi.n	800100e <main+0x1d6>
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <main+0x2e4>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <main+0x2e8>)
 8000fe8:	015b      	lsls	r3, r3, #5
 8000fea:	4413      	add	r3, r2
 8000fec:	3302      	adds	r3, #2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d00c      	beq.n	800100e <main+0x1d6>
				  draw_beam(x_bullets[i], y_bullets[i]);
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <main+0x2e4>)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ffc:	4949      	ldr	r1, [pc, #292]	; (8001124 <main+0x2ec>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001004:	4619      	mov	r1, r3
 8001006:	4610      	mov	r0, r2
 8001008:	f7ff fe1a 	bl	8000c40 <draw_beam>
 800100c:	e009      	b.n	8001022 <main+0x1ea>
			  }
			  else
			  {
				  led_matrix[x_bullets[i]][2] = 0;
 800100e:	4a43      	ldr	r2, [pc, #268]	; (800111c <main+0x2e4>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001016:	4a42      	ldr	r2, [pc, #264]	; (8001120 <main+0x2e8>)
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	4413      	add	r3, r2
 800101c:	3302      	adds	r3, #2
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < counter_bullet; i++){
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	3301      	adds	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <main+0x2f0>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4293      	cmp	r3, r2
 8001034:	dbc6      	blt.n	8000fc4 <main+0x18c>
			  }
		  }
	  }

	  //draw enemy in led matrix
	  for (int k = 0; k < 3; k++ ){
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e04c      	b.n	80010d6 <main+0x29e>
		  for (int i=0; i < 3; i++){
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	e043      	b.n	80010ca <main+0x292>
			  for (int j=0; j<3; j++){
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e03a      	b.n	80010be <main+0x286>
				  if (led_matrix[array_enemy[k][1]+i][array_enemy[k][0]+j] == 1){
 8001048:	4a33      	ldr	r2, [pc, #204]	; (8001118 <main+0x2e0>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	885b      	ldrh	r3, [r3, #2]
 8001052:	461a      	mov	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	441a      	add	r2, r3
 8001058:	492f      	ldr	r1, [pc, #188]	; (8001118 <main+0x2e0>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8001060:	4619      	mov	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	440b      	add	r3, r1
 8001066:	492e      	ldr	r1, [pc, #184]	; (8001120 <main+0x2e8>)
 8001068:	0152      	lsls	r2, r2, #5
 800106a:	440a      	add	r2, r1
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d121      	bne.n	80010b8 <main+0x280>
					  flag_draw[k] = 1;
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <main+0x2dc>)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2101      	movs	r1, #1
 800107a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  for ( int t = 0; t < 27; t++){
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	e016      	b.n	80010b2 <main+0x27a>
						  if (x_bullets[t] == array_enemy[k][1]+i){
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <main+0x2e4>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108c:	4619      	mov	r1, r3
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <main+0x2e0>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	885b      	ldrh	r3, [r3, #2]
 8001098:	461a      	mov	r2, r3
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4413      	add	r3, r2
 800109e:	4299      	cmp	r1, r3
 80010a0:	d104      	bne.n	80010ac <main+0x274>
							  x_bullets[t] = 0;
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <main+0x2e4>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2100      	movs	r1, #0
 80010a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					  for ( int t = 0; t < 27; t++){
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3301      	adds	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b1a      	cmp	r3, #26
 80010b6:	dde5      	ble.n	8001084 <main+0x24c>
			  for (int j=0; j<3; j++){
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	ddc1      	ble.n	8001048 <main+0x210>
		  for (int i=0; i < 3; i++){
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	3301      	adds	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	ddb8      	ble.n	8001042 <main+0x20a>
	  for (int k = 0; k < 3; k++ ){
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	ddaf      	ble.n	800103c <main+0x204>
					  }
				  }
			  }
		  }
	  }
	  for (int k = 0; k<3; k++){
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	e03a      	b.n	8001158 <main+0x320>
 80010e2:	bf00      	nop
 80010e4:	20000440 	.word	0x20000440
 80010e8:	20000488 	.word	0x20000488
 80010ec:	40020000 	.word	0x40020000
 80010f0:	200003c4 	.word	0x200003c4
 80010f4:	200003d8 	.word	0x200003d8
 80010f8:	200003e4 	.word	0x200003e4
 80010fc:	20000002 	.word	0x20000002
 8001100:	200003b8 	.word	0x200003b8
 8001104:	20000004 	.word	0x20000004
 8001108:	200003ba 	.word	0x200003ba
 800110c:	200003be 	.word	0x200003be
 8001110:	200003c0 	.word	0x200003c0
 8001114:	200003a4 	.word	0x200003a4
 8001118:	200003ac 	.word	0x200003ac
 800111c:	20000334 	.word	0x20000334
 8001120:	20000130 	.word	0x20000130
 8001124:	2000036c 	.word	0x2000036c
 8001128:	20000330 	.word	0x20000330
		  if (flag_draw[k] == 0){
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <main+0x3ac>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10c      	bne.n	8001152 <main+0x31a>
			  draw_enemy_aircraft(array_enemy[k][0], array_enemy[k][1]);
 8001138:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <main+0x3b0>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <main+0x3b0>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	885b      	ldrh	r3, [r3, #2]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff fd31 	bl	8000bb4 <draw_enemy_aircraft>
	  for (int k = 0; k<3; k++){
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	dde6      	ble.n	800112c <main+0x2f4>
//		  counter_bullet++;
////		  draw_beam(x_beam, 8);
//	  }

	  //udapte matrix for draw
	  disp1color_FillScreenbuff(0);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff f9c6 	bl	80004f0 <disp1color_FillScreenbuff>
	  for(int16_t i = 0; i < 16; i++){
 8001164:	2300      	movs	r3, #0
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	e027      	b.n	80011ba <main+0x382>
		  for(int16_t j = 0; j < 32; j++){
 800116a:	2300      	movs	r3, #0
 800116c:	803b      	strh	r3, [r7, #0]
 800116e:	e01a      	b.n	80011a6 <main+0x36e>
			  if (led_matrix[i][j])
 8001170:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001174:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001178:	491c      	ldr	r1, [pc, #112]	; (80011ec <main+0x3b4>)
 800117a:	0152      	lsls	r2, r2, #5
 800117c:	440a      	add	r2, r1
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <main+0x362>
			  disp1color_DrawLine(j, i, j, i);
 8001186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800118a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800118e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001192:	f9b7 0000 	ldrsh.w	r0, [r7]
 8001196:	f7ff fa25 	bl	80005e4 <disp1color_DrawLine>
		  for(int16_t j = 0; j < 32; j++){
 800119a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	803b      	strh	r3, [r7, #0]
 80011a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011aa:	2b1f      	cmp	r3, #31
 80011ac:	dde0      	ble.n	8001170 <main+0x338>
	  for(int16_t i = 0; i < 16; i++){
 80011ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	807b      	strh	r3, [r7, #2]
 80011ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	ddd3      	ble.n	800116a <main+0x332>
		  }
	  }

	  disp1color_UpdateFromBuff();
 80011c2:	f7ff f9a7 	bl	8000514 <disp1color_UpdateFromBuff>
	  prepare_data();
 80011c6:	f7ff fb9d 	bl	8000904 <prepare_data>
	  disp_row(0);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fd72 	bl	8000cb4 <disp_row>
	  disp_row(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fd6f 	bl	8000cb4 <disp_row>
	  disp_row(2);
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fd6c 	bl	8000cb4 <disp_row>
	  disp_row(3);
 80011dc:	2003      	movs	r0, #3
 80011de:	f7ff fd69 	bl	8000cb4 <disp_row>
	  generate_ledmatrix();
 80011e2:	e6e0      	b.n	8000fa6 <main+0x16e>
 80011e4:	200003a4 	.word	0x200003a4
 80011e8:	200003ac 	.word	0x200003ac
 80011ec:	20000130 	.word	0x20000130

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f9e6 	bl	80035d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <SystemClock_Config+0xcc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <SystemClock_Config+0xcc>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <SystemClock_Config+0xd0>)
 800123a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2310      	movs	r3, #16
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001260:	2308      	movs	r3, #8
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800126c:	2304      	movs	r3, #4
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fe39 	bl	8001eec <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001280:	f000 f820 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2105      	movs	r1, #5
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 f89a 	bl	80023dc <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012ae:	f000 f809 	bl	80012c4 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_SPI1_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_SPI1_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_SPI1_Init+0x64>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_SPI1_Init+0x64>)
 80012fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_SPI1_Init+0x64>)
 8001304:	2210      	movs	r2, #16
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_SPI1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_SPI1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_SPI1_Init+0x64>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_SPI1_Init+0x64>)
 8001322:	f001 fa07 	bl	8002734 <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800132c:	f7ff ffca 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200003e8 	.word	0x200003e8
 8001338:	40013000 	.word	0x40013000

0800133c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_SPI_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12b      	bne.n	80013b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 8001368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_SPI_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001396:	23a0      	movs	r3, #160	; 0xa0
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a6:	2305      	movs	r3, #5
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_SPI_MspInit+0x8c>)
 80013b2:	f000 fbb1 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40013000 	.word	0x40013000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 fa24 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//go right
	if(y_start >= 11){
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <EXTI3_IRQHandler+0x30>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d903      	bls.n	8001486 <EXTI3_IRQHandler+0x16>
		y_start = 11;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <EXTI3_IRQHandler+0x30>)
 8001480:	220b      	movs	r2, #11
 8001482:	801a      	strh	r2, [r3, #0]
 8001484:	e006      	b.n	8001494 <EXTI3_IRQHandler+0x24>
	}
	else{
		y_start = y_start + 1;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <EXTI3_IRQHandler+0x30>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <EXTI3_IRQHandler+0x30>)
 8001492:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(right_button_Pin);
 8001494:	2008      	movs	r0, #8
 8001496:	f000 fd05 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000004 	.word	0x20000004

080014a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	  state_beam =! state_beam;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <EXTI4_IRQHandler+0x70>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf0c      	ite	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	2300      	movne	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <EXTI4_IRQHandler+0x70>)
 80014bc:	701a      	strb	r2, [r3, #0]
	  x_bullets[counter_bullet] = x_start + 5;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <EXTI4_IRQHandler+0x74>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4a15      	ldr	r2, [pc, #84]	; (800151c <EXTI4_IRQHandler+0x78>)
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	b292      	uxth	r2, r2
 80014ca:	3305      	adds	r3, #5
 80014cc:	b299      	uxth	r1, r3
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <EXTI4_IRQHandler+0x7c>)
 80014d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  y_bullets[counter_bullet] = y_start + 2;
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <EXTI4_IRQHandler+0x80>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <EXTI4_IRQHandler+0x78>)
 80014dc:	8812      	ldrh	r2, [r2, #0]
 80014de:	b292      	uxth	r2, r2
 80014e0:	3302      	adds	r3, #2
 80014e2:	b299      	uxth	r1, r3
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <EXTI4_IRQHandler+0x84>)
 80014e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  counter_bullet++;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <EXTI4_IRQHandler+0x78>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <EXTI4_IRQHandler+0x78>)
 80014f6:	801a      	strh	r2, [r3, #0]
	  if (counter_bullet >= 27){
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <EXTI4_IRQHandler+0x78>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2b1a      	cmp	r3, #26
 8001500:	d902      	bls.n	8001508 <EXTI4_IRQHandler+0x64>
		  counter_bullet = 27;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <EXTI4_IRQHandler+0x78>)
 8001504:	221b      	movs	r2, #27
 8001506:	801a      	strh	r2, [r3, #0]
//	  if (counter_bullet >= 27){
//		  counter_bullet = 27;
//	  }

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_beam_Pin);
 8001508:	2010      	movs	r0, #16
 800150a:	f000 fccb 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200003bc 	.word	0x200003bc
 8001518:	20000002 	.word	0x20000002
 800151c:	20000330 	.word	0x20000330
 8001520:	20000334 	.word	0x20000334
 8001524:	20000004 	.word	0x20000004
 8001528:	2000036c 	.word	0x2000036c

0800152c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//go left
	if ( y_start <= 0){
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <EXTI9_5_IRQHandler+0x30>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <EXTI9_5_IRQHandler+0x16>
		y_start = 0;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <EXTI9_5_IRQHandler+0x30>)
 800153c:	2200      	movs	r2, #0
 800153e:	801a      	strh	r2, [r3, #0]
 8001540:	e006      	b.n	8001550 <EXTI9_5_IRQHandler+0x24>
	}
	else{
		y_start = y_start - 1;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <EXTI9_5_IRQHandler+0x30>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <EXTI9_5_IRQHandler+0x30>)
 800154e:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(left_button_Pin);
 8001550:	2020      	movs	r0, #32
 8001552:	f000 fca7 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000004 	.word	0x20000004

08001560 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	for (int i = 0; i < counter_bullet; i++){
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	e012      	b.n	8001592 <TIM1_UP_TIM10_IRQHandler+0x32>
		if (x_bullets[i] != 0){
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <TIM1_UP_TIM10_IRQHandler+0x2c>
			x_bullets[i] += 1;
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x50>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001580:	3301      	adds	r3, #1
 8001582:	b299      	uxth	r1, r3
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <TIM1_UP_TIM10_IRQHandler+0x50>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < counter_bullet; i++){
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4293      	cmp	r3, r2
 800159e:	dbe5      	blt.n	800156c <TIM1_UP_TIM10_IRQHandler+0xc>

		}
	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 80015a2:	f001 fc17 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000334 	.word	0x20000334
 80015b4:	20000330 	.word	0x20000330
 80015b8:	20000440 	.word	0x20000440

080015bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM2_IRQHandler+0x10>)
 80015c2:	f001 fc07 	bl	8002dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000488 	.word	0x20000488

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <MX_TIM1_Init+0xa0>)
 8001614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40000-1;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001618:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800161c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800162a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM1_Init+0x9c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM1_Init+0x9c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001640:	f001 fb08 	bl	8002c54 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800164a:	f7ff fe3b 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM1_Init+0x9c>)
 800165c:	f001 fcc2 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001666:	f7ff fe2d 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM1_Init+0x9c>)
 8001678:	f001 fee8 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001682:	f7ff fe1f 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000440 	.word	0x20000440
 8001694:	40010000 	.word	0x40010000

08001698 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	463b      	mov	r3, r7
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM2_Init+0x98>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000-1;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM2_Init+0x98>)
 80016be:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM2_Init+0x98>)
 80016cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_TIM2_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM2_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_TIM2_Init+0x98>)
 80016e0:	f001 fab8 	bl	8002c54 <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ea:	f7ff fdeb 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM2_Init+0x98>)
 80016fc:	f001 fc72 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001706:	f7ff fddd 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM2_Init+0x98>)
 8001718:	f001 fe98 	bl	800344c <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001722:	f7ff fdcf 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000488 	.word	0x20000488

08001734 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_TIM_Base_MspInit+0x80>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d116      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2019      	movs	r0, #25
 8001768:	f000 f99f 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f000 f9b8 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001772:	e01a      	b.n	80017aa <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d115      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_TIM_Base_MspInit+0x84>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201c      	movs	r0, #28
 80017a0:	f000 f983 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	201c      	movs	r0, #28
 80017a6:	f000 f99c 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40023800 	.word	0x40023800

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
	  ldr   sp, =_estack       /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c2:	490e      	ldr	r1, [pc, #56]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d8:	4c0b      	ldr	r4, [pc, #44]	; (8001808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e6:	f7ff fef3 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 febf 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fb23 	bl	8000e38 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
	  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001800:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8001804:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001808:	200004d4 	.word	0x200004d4

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f92b 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fdc2 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f943 	bl	8001afe <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f90b 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000010 	.word	0x20000010
 80018b0:	2000000c 	.word	0x2000000c

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000010 	.word	0x20000010
 80018d8:	200004d0 	.word	0x200004d0

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200004d0 	.word	0x200004d0

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e177      	b.n	8001e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8166 	bne.w	8001e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80c0 	beq.w	8001e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_GPIO_Init+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a61      	ldr	r2, [pc, #388]	; (8001e40 <HAL_GPIO_Init+0x328>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_GPIO_Init+0x32c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d037      	beq.n	8001d56 <HAL_GPIO_Init+0x23e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_GPIO_Init+0x330>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_GPIO_Init+0x23a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_GPIO_Init+0x334>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02b      	beq.n	8001d4e <HAL_GPIO_Init+0x236>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_GPIO_Init+0x338>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d025      	beq.n	8001d4a <HAL_GPIO_Init+0x232>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a54      	ldr	r2, [pc, #336]	; (8001e54 <HAL_GPIO_Init+0x33c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01f      	beq.n	8001d46 <HAL_GPIO_Init+0x22e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_GPIO_Init+0x340>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d019      	beq.n	8001d42 <HAL_GPIO_Init+0x22a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_GPIO_Init+0x344>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x226>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a51      	ldr	r2, [pc, #324]	; (8001e60 <HAL_GPIO_Init+0x348>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x222>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a50      	ldr	r2, [pc, #320]	; (8001e64 <HAL_GPIO_Init+0x34c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x21e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	; (8001e68 <HAL_GPIO_Init+0x350>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001d2e:	2309      	movs	r3, #9
 8001d30:	e012      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d32:	230a      	movs	r3, #10
 8001d34:	e010      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00e      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x328>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a34      	ldr	r2, [pc, #208]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_GPIO_Init+0x354>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f ae84 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40022400 	.word	0x40022400
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	807b      	strh	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e80:	787b      	ldrb	r3, [r7, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8e:	887b      	ldrh	r3, [r7, #2]
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f806 	bl	8001ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013c00 	.word	0x40013c00

08001ed4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e267      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d075      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d00c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d112      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d10b      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	4b7e      	ldr	r3, [pc, #504]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d05b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d157      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e242      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_OscConfig+0x74>
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a75      	ldr	r2, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b70      	ldr	r3, [pc, #448]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6f      	ldr	r2, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6c      	ldr	r2, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a68      	ldr	r2, [pc, #416]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a65      	ldr	r2, [pc, #404]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fc9a 	bl	80018dc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fc96 	bl	80018dc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e207      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fc86 	bl	80018dc <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff fc82 	bl	80018dc <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1f3      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002002:	4b4a      	ldr	r3, [pc, #296]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1c7      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCC_OscConfig+0x244>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fc3b 	bl	80018dc <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff fc37 	bl	80018dc <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1a8      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4925      	ldr	r1, [pc, #148]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_OscConfig+0x244>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fc1a 	bl	80018dc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fc16 	bl	80018dc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e187      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d036      	beq.n	8002144 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_RCC_OscConfig+0x248>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7ff fbfa 	bl	80018dc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff fbf6 	bl	80018dc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e167      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x200>
 800210a:	e01b      	b.n	8002144 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x248>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7ff fbe3 	bl	80018dc <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	e00e      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211a:	f7ff fbdf 	bl	80018dc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d907      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e150      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
 800212c:	40023800 	.word	0x40023800
 8002130:	42470000 	.word	0x42470000
 8002134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ea      	bne.n	800211a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8097 	beq.w	8002280 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b7d      	ldr	r3, [pc, #500]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a7c      	ldr	r2, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b74      	ldr	r3, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a73      	ldr	r2, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7ff fb9f 	bl	80018dc <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7ff fb9b 	bl	80018dc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e10c      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2ea>
 80021c8:	4b64      	ldr	r3, [pc, #400]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	e01c      	b.n	8002210 <HAL_RCC_OscConfig+0x324>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x30c>
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a5b      	ldr	r2, [pc, #364]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0x324>
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7ff fb60 	bl	80018dc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7ff fb5c 	bl	80018dc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0cb      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0ee      	beq.n	8002220 <HAL_RCC_OscConfig+0x334>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fb4a 	bl	80018dc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7ff fb46 	bl	80018dc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0b5      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ee      	bne.n	800224c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a1 	beq.w	80023cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d05c      	beq.n	8002350 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d141      	bne.n	8002322 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff fb1a 	bl	80018dc <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff fb16 	bl	80018dc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e087      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff faef 	bl	80018dc <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff faeb 	bl	80018dc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e05c      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x416>
 8002320:	e054      	b.n	80023cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fad8 	bl	80018dc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff fad4 	bl	80018dc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e045      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x444>
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e038      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x4ec>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d028      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d121      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800239e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff fa06 	bl	80018dc <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff fa02 	bl	80018dc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f966 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	080035f8 	.word	0x080035f8
 80025a0:	20000008 	.word	0x20000008
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b090      	sub	sp, #64	; 0x40
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	f200 80a1 	bhi.w	8002714 <HAL_RCC_GetSysClockFreq+0x16c>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e09b      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_GetSysClockFreq+0x184>)
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80025e0:	e09b      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025e6:	e098      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f2:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	2200      	movs	r2, #0
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	627a      	str	r2, [r7, #36]	; 0x24
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002610:	2100      	movs	r1, #0
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 8002614:	fb03 f201 	mul.w	r2, r3, r1
 8002618:	2300      	movs	r3, #0
 800261a:	fb00 f303 	mul.w	r3, r0, r3
 800261e:	4413      	add	r3, r2
 8002620:	4a43      	ldr	r2, [pc, #268]	; (8002730 <HAL_RCC_GetSysClockFreq+0x188>)
 8002622:	fba0 1202 	umull	r1, r2, r0, r2
 8002626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002628:	460a      	mov	r2, r1
 800262a:	62ba      	str	r2, [r7, #40]	; 0x28
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	4413      	add	r3, r2
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	2200      	movs	r2, #0
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	61fa      	str	r2, [r7, #28]
 800263a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002642:	f7fd fdd3 	bl	80001ec <__aeabi_uldivmod>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4613      	mov	r3, r2
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264e:	e053      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	2200      	movs	r2, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	617a      	str	r2, [r7, #20]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002662:	f04f 0b00 	mov.w	fp, #0
 8002666:	4652      	mov	r2, sl
 8002668:	465b      	mov	r3, fp
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002678:	0150      	lsls	r0, r2, #5
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	ebb2 080a 	subs.w	r8, r2, sl
 8002682:	eb63 090b 	sbc.w	r9, r3, fp
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002692:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002696:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800269a:	ebb2 0408 	subs.w	r4, r2, r8
 800269e:	eb63 0509 	sbc.w	r5, r3, r9
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	00eb      	lsls	r3, r5, #3
 80026ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b0:	00e2      	lsls	r2, r4, #3
 80026b2:	4614      	mov	r4, r2
 80026b4:	461d      	mov	r5, r3
 80026b6:	eb14 030a 	adds.w	r3, r4, sl
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	eb45 030b 	adc.w	r3, r5, fp
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ce:	4629      	mov	r1, r5
 80026d0:	028b      	lsls	r3, r1, #10
 80026d2:	4621      	mov	r1, r4
 80026d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d8:	4621      	mov	r1, r4
 80026da:	028a      	lsls	r2, r1, #10
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	2200      	movs	r2, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ec:	f7fd fd7e 	bl	80001ec <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	3301      	adds	r3, #1
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002712:	e002      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetSysClockFreq+0x184>)
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800271c:	4618      	mov	r0, r3
 800271e:	3740      	adds	r7, #64	; 0x40
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	017d7840 	.word	0x017d7840

08002734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07b      	b.n	800283e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002756:	d009      	beq.n	800276c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	e005      	b.n	800276c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fdd8 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0104 	and.w	r1, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0210 	and.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b088      	sub	sp, #32
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_SPI_Transmit+0x22>
 8002864:	2302      	movs	r3, #2
 8002866:	e126      	b.n	8002ab6 <HAL_SPI_Transmit+0x270>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002870:	f7ff f834 	bl	80018dc <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800288a:	e10b      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0x52>
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800289c:	e102      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2203      	movs	r2, #3
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e4:	d10f      	bne.n	8002906 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292c:	d14b      	bne.n	80029c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_Transmit+0xf6>
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d13e      	bne.n	80029ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002960:	e02b      	b.n	80029ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d112      	bne.n	8002996 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	86da      	strh	r2, [r3, #54]	; 0x36
 8002994:	e011      	b.n	80029ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002996:	f7fe ffa1 	bl	80018dc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d803      	bhi.n	80029ae <HAL_SPI_Transmit+0x168>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d102      	bne.n	80029b4 <HAL_SPI_Transmit+0x16e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b8:	e074      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ce      	bne.n	8002962 <HAL_SPI_Transmit+0x11c>
 80029c4:	e04c      	b.n	8002a60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_SPI_Transmit+0x18e>
 80029ce:	8afb      	ldrh	r3, [r7, #22]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d140      	bne.n	8002a56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029fa:	e02c      	b.n	8002a56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d113      	bne.n	8002a32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a30:	e011      	b.n	8002a56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a32:	f7fe ff53 	bl	80018dc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d803      	bhi.n	8002a4a <HAL_SPI_Transmit+0x204>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d102      	bne.n	8002a50 <HAL_SPI_Transmit+0x20a>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a54:	e026      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1cd      	bne.n	80029fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f8b3 	bl	8002bd0 <SPI_EndRxTxTransaction>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e000      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ad0:	f7fe ff04 	bl	80018dc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ae0:	f7fe fefc 	bl	80018dc <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af6:	e054      	b.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d050      	beq.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b00:	f7fe feec 	bl	80018dc <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d13d      	bne.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d111      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	d004      	beq.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d107      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d10f      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e017      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d19b      	bne.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000008 	.word	0x20000008

08002bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <SPI_EndRxTxTransaction+0x7c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <SPI_EndRxTxTransaction+0x80>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0d5b      	lsrs	r3, r3, #21
 8002be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfa:	d112      	bne.n	8002c22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2200      	movs	r2, #0
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff ff5a 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d016      	beq.n	8002c40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e00f      	b.n	8002c42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d0f2      	beq.n	8002c22 <SPI_EndRxTxTransaction+0x52>
 8002c3c:	e000      	b.n	8002c40 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c3e:	bf00      	nop
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000008 	.word	0x20000008
 8002c50:	165e9f81 	.word	0x165e9f81

08002c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fd5a 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 faa0 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04e      	b.n	8002daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d01d      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIM_Base_Start_IT+0x80>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d010      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d96:	e007      	b.n	8002da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	40010400 	.word	0x40010400
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40001800 	.word	0x40001800

08002dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0202 	mvn.w	r2, #2
 8002e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9bf 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f9b1 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9c2 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0204 	mvn.w	r2, #4
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f995 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f987 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f998 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d122      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0208 	mvn.w	r2, #8
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f96b 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f95d 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f96e 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d122      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d11b      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0210 	mvn.w	r2, #16
 8002efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2208      	movs	r2, #8
 8002f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f941 	bl	800319a <HAL_TIM_IC_CaptureCallback>
 8002f18:	e005      	b.n	8002f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f933 	bl	8003186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f944 	bl	80031ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0201 	mvn.w	r2, #1
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f90d 	bl	8003172 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 faea 	bl	8003558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f909 	bl	80031c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0220 	mvn.w	r2, #32
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fab4 	bl	8003544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_ConfigClockSource+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0b4      	b.n	800316a <HAL_TIM_ConfigClockSource+0x186>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003038:	d03e      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0xd4>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	f200 8087 	bhi.w	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	f000 8086 	beq.w	8003156 <HAL_TIM_ConfigClockSource+0x172>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d87f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d01a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xa6>
 8003054:	2b70      	cmp	r3, #112	; 0x70
 8003056:	d87b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d050      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x11a>
 800305c:	2b60      	cmp	r3, #96	; 0x60
 800305e:	d877      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d03c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xfa>
 8003064:	2b50      	cmp	r3, #80	; 0x50
 8003066:	d873      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d058      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x13a>
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d86f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d064      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b30      	cmp	r3, #48	; 0x30
 8003076:	d86b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d060      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d867      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05c      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d05a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	e062      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f000 f9b7 	bl	800340c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
      break;
 80030b6:	e04f      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f000 f9a0 	bl	800340c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030da:	609a      	str	r2, [r3, #8]
      break;
 80030dc:	e03c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 f914 	bl	8003318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2150      	movs	r1, #80	; 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f96d 	bl	80033d6 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e02c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	461a      	mov	r2, r3
 800310c:	f000 f933 	bl	8003376 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f95d 	bl	80033d6 <TIM_ITRx_SetConfig>
      break;
 800311c:	e01c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f8f4 	bl	8003318 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f94d 	bl	80033d6 <TIM_ITRx_SetConfig>
      break;
 800313c:	e00c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 f944 	bl	80033d6 <TIM_ITRx_SetConfig>
      break;
 800314e:	e003      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e000      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a40      	ldr	r2, [pc, #256]	; (80032ec <TIM_Base_SetConfig+0x114>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d00f      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <TIM_Base_SetConfig+0x118>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00b      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3c      	ldr	r2, [pc, #240]	; (80032f4 <TIM_Base_SetConfig+0x11c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <TIM_Base_SetConfig+0x120>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <TIM_Base_SetConfig+0x124>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d108      	bne.n	800322a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <TIM_Base_SetConfig+0x114>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d027      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <TIM_Base_SetConfig+0x118>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d023      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2b      	ldr	r2, [pc, #172]	; (80032f4 <TIM_Base_SetConfig+0x11c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <TIM_Base_SetConfig+0x120>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a29      	ldr	r2, [pc, #164]	; (80032fc <TIM_Base_SetConfig+0x124>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d017      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a28      	ldr	r2, [pc, #160]	; (8003300 <TIM_Base_SetConfig+0x128>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <TIM_Base_SetConfig+0x12c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00f      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <TIM_Base_SetConfig+0x130>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00b      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <TIM_Base_SetConfig+0x134>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a24      	ldr	r2, [pc, #144]	; (8003310 <TIM_Base_SetConfig+0x138>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a23      	ldr	r2, [pc, #140]	; (8003314 <TIM_Base_SetConfig+0x13c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d108      	bne.n	800329c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <TIM_Base_SetConfig+0x114>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0xf8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	615a      	str	r2, [r3, #20]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40010400 	.word	0x40010400
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800
 800330c:	40001800 	.word	0x40001800
 8003310:	40001c00 	.word	0x40001c00
 8003314:	40002000 	.word	0x40002000

08003318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 030a 	bic.w	r3, r3, #10
 8003354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b087      	sub	sp, #28
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0210 	bic.w	r2, r3, #16
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	031b      	lsls	r3, r3, #12
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f043 0307 	orr.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	431a      	orrs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4313      	orrs	r3, r2
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e05a      	b.n	800351a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a21      	ldr	r2, [pc, #132]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d01d      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10c      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40010400 	.word	0x40010400
 800353c:	40014000 	.word	0x40014000
 8003540:	40001800 	.word	0x40001800

08003544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 f82e 	bl	80035e0 <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003610 	.word	0x08003610
 80035a8:	08003610 	.word	0x08003610
 80035ac:	08003610 	.word	0x08003610
 80035b0:	08003614 	.word	0x08003614

080035b4 <memcpy>:
 80035b4:	440a      	add	r2, r1
 80035b6:	4291      	cmp	r1, r2
 80035b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035bc:	d100      	bne.n	80035c0 <memcpy+0xc>
 80035be:	4770      	bx	lr
 80035c0:	b510      	push	{r4, lr}
 80035c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035ca:	4291      	cmp	r1, r2
 80035cc:	d1f9      	bne.n	80035c2 <memcpy+0xe>
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <memset>:
 80035d0:	4402      	add	r2, r0
 80035d2:	4603      	mov	r3, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d100      	bne.n	80035da <memset+0xa>
 80035d8:	4770      	bx	lr
 80035da:	f803 1b01 	strb.w	r1, [r3], #1
 80035de:	e7f9      	b.n	80035d4 <memset+0x4>

080035e0 <_init>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr

080035ec <_fini>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr
